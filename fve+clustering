'''script for I/O -->clustering -->generating story --sklearn'''
import numpy as np
import os
import glob
from sklearn.cluster import KMeans
from keras.applications import imagenet_utils
from keras.applications.inception_v3 import preprocess_input
from keras.preprocessing.image import img_to_array
from keras.preprocessing.image import load_img

# resize an image using the PIL image library

import PIL
from PIL import Image
src_dir = input("Please enter your absolute source image directory, all images in *.jpg format\n")

inputShape = (224, 224)
preprocess = imagenet_utils.preprocess_input

ds=[]
for jpgfile in glob.iglob(os.path.join(src_dir, "*.jpg")):
	print(jpgfile)
	image = load_img(jpgfile, target_size=inputShape)
	image = img_to_array(image)
	image = np.expand_dims(image, axis=0)
	image = preprocess(image)
	ds.append(np.array(image))
data = np.array(ds)    

print("Images taken")

""" now we have the data as an numpy array in data. We then feed this to the autoencoder
    and then iteratively append all the encoded features into the numpy array X
"""
"""
from keras.models import Model
from keras.models import load_model
import time
print('Loading model :')
t0 = time.time()
autoencoder = load_model('autoencoder.h5')
encoder = Model(inputs=autoencoder.input, outputs=autoencoder.get_layer('encoder').output)
t1 = time.time()
print('Model loaded in: ', t1-t0)
data = x_train.astype('float32') / 255.
data = np.reshape(data, (len(data), 28, 28, 1))  # adapt this if using `channels_first` image data format
X=encoder.predict(data)
X = X.reshape(X.shape[0],X.shape[1] * X.shape[2] * X.shape[3])

"""
from keras.applications import VGG19
Network = VGG19
model = Network(weights="imagenet")


X = []
for i in data:
	#print(i)
	preds = model.predict(i)
	P = imagenet_utils.decode_predictions(preds)
	# loop over the predictions and display the rank-5 predictions +
	# probabilities to our terminal
	for (i, (imagenetID, label, prob)) in enumerate(P[0]):
		print("{}. {}: {:.2f}%".format(i + 1, label, prob * 100))
	fv = preds.reshape(1000,1)
	#print(fv[0])
	X.append(np.array(fv))

#np.savetxt('pred.txt',X)	
X = np.array(X) 

X = X.reshape(len(X) , 1000)

print("Clustering starts")
#now clustering the input 


cluster=int(input("How many clusters do you want?\n"))
kmeans=KMeans(n_clusters=cluster)
kmeans.fit(X)
centroids = kmeans.cluster_centers_
print(kmeans.labels_)
dx=[]
dx, _ = pairwise_distances_argmin_min(kmeans.cluster_centers_, X)
dx.sort()

#now we save the images in a destination folder corresponding to indices in the list dx
import shutil
dest_dir = input("Please enter your absolute dest image directory, all images in *.jpg format\n")
counter=0
i = 0
for jpgfile in glob.iglob(os.path.join(src_dir, "*.jpg")):
    if( i >= len(dx)):
        break;
    if(counter==dx[i]):
        i+=1
        shutil.copy(jpgfile, dest_dir)
    counter+=1
